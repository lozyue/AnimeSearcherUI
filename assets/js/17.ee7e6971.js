(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{402:function(t,s,a){"use strict";a.r(s);var e=a(49),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[t._v("#")]),t._v(" Features")]),t._v(" "),a("h2",{attrs:{id:"资源引用路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源引用路径"}},[t._v("#")]),t._v(" 资源引用路径")]),t._v(" "),a("p",[t._v("AnimeUI对除Style加载外的主题风格资源的引用做了简化，无需从AnimeUI根目录开始包括一个由当前主题名称构成的路径前缀。")]),t._v(" "),a("p",[t._v("如你所见，不管是入口文件"),a("code",[t._v("entry.json")]),t._v("配置中加载的样式表、JS文件，\n还是 "),a("code",[t._v("utility")]),t._v(" API提供的包含加载资源的的各种路径参数\n默认都将根目录设置成了当前主题名称方便以简洁的相对路径方式引入。")]),t._v(" "),a("p",[t._v("但在用户定义的Style文件中，考虑到性能开销，就没有继续对资源引用保持这种优雅了。")]),t._v(" "),a("p",[t._v("由于浏览器处于安全原因的限制，CSS不支持路径拼接。也没有使用JavaScript对样式表文件进行预取并做匹配修改。\n第一版设计方案中的主题风格Style限定了CSS样式文件，为了不牺牲样式修改的直观性，AnimeUI的样式资源引入方式最终还是妥协于常规方式。")]),t._v(" "),a("p",[t._v("所以"),a("strong",[t._v("样式表中的资源需要以AnimeUI根目录开始引用")]),t._v("，但仍然推荐以相对路径加载以适应子目录。")]),t._v(" "),a("p",[t._v('也就是说，（举个栗子）你有个位于主题风格"mytheme"文件夹下的"awesome.jpg"')]),t._v(" "),a("div",{pre:!0},[a("pre",{pre:!0,attrs:{style:"color:#fff;"}},[t._v(".\n├── /  (WebUI Root)\n│   ├── themes (主题总目录)\n│   │   ├── styles (主题风格目录)\n|   |   |   ├── mytheme\n|   |   |   |   ├── awesome.jpg\n|   |   |   └── main.css\n│   │   └── ...\n│   └── ... \n")])]),a("p",[t._v("在你的main.css中有一个background类，导入awesome.jpg就需要如下引用:")]),t._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("background-image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("themes/styles/mytheme/awesome.jpg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("当然也可以使用Sass定义变量的方式做做编译工作弥补优雅度\n（你甚至可以使用typescript配合提供的简陋ts模块声明文件"),a("code",[t._v("*.d.ts")]),t._v("来获得"),a("code",[t._v("utility")]),t._v("和"),a("code",[t._v("utils")]),t._v("的属性方法提示）")]),t._v(" "),a("div",{staticClass:"language-scss line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-scss"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$ThemeRoot")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" themes/styles/mytheme"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("background-image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token url"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("#{$ThemeRoot}")]),t._v("/awesome.jpg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"error-tips-排错提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#error-tips-排错提示"}},[t._v("#")]),t._v(" Error Tips (排错提示)")]),t._v(" "),a("p",[t._v("这里记录在使用主题风格API系统的过程中可能碰的不同的报错记录及原因：")]),t._v(" "),a("blockquote",[a("p",[a("font",{attrs:{color:"red"}},[t._v("TypeError: source[methodName] is undefined")])],1)]),t._v(" "),a("p",[t._v("可能的原因：")]),t._v(" "),a("ul",[a("li",[t._v("主题导出API "),a("code",[t._v("utility")]),t._v(" 下的方法不存在而调用失败")])]),t._v(" "),a("hr"),t._v(" "),a("blockquote",[a("p",[a("font",{attrs:{color:"red"}},[t._v("Uncaught SyntaxError: redeclaration of [const/let] xxx")])],1)]),t._v(" "),a("p",[t._v("可能的原因：")]),t._v(" "),a("ul",[a("li",[t._v("在主题风格script编写中声明了全局 let 变量或者常量，这将在主题被重复切换到之时产生错误")])]),t._v(" "),a("p",[t._v("解决方案：")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("var")]),t._v(" 代替"),a("code",[t._v("const/let")]),t._v("进行声明变量")]),t._v(" "),a("li",[t._v("最好的办法是避免声明全局变量造成污染，可以使用一个函数将作用域封闭：")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 使用匿名立即执行函数(推荐)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Draw codes here!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 也可以套用 $theme 方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$theme")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Draw codes here!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"开发模式规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发模式规范"}},[t._v("#")]),t._v(" 开发模式规范")]),t._v(" "),a("p",[t._v("尽管对于主题风格Script编写增强的开发模式事实上由开发者个人决定，\n但其实也可见在API设计上对开发规范的要求。")]),t._v(" "),a("p",[t._v("首先是入口函数"),a("code",[t._v("$theme")]),t._v("似乎比较复杂的三参数模式，选项被放在了第三个参数上，\n这就导致有时候无需处理Script的注入副作用时也必须写一个空函数放到第二个回调上，略显麻烦。\n而且在第一个参数执行回调中的第三个参数context中其实已经提供了好用的hook函数可以完全替代用于消除副作用的第二个回调参数参数，\n传递自不同的参数还因为作用域的问题可能导致要提升变量而增加一些工作量。\n这样来看第二个参数完全没有存在的价值。你可能完全不明白为什么要给"),a("code",[t._v("$theme")]),t._v("整出三个参数来。")]),t._v(" "),a("blockquote",[a("p",[t._v("如上，因为"),a("code",[t._v("$theme")]),t._v("函数较复杂，这里还是先列出"),a("code",[t._v("$theme")]),t._v('函数及参数的类TS结构\n并用结构里定义的名来代替上面出现的可能的易使人困惑的"第..参数"的表达形式。')])]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不严谨的TS类型声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("$theme")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("utility"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" revoke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("revoke")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("utility"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Object\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("blockquote",[a("p",[t._v("事实上，文档中已经很多地方混用了这些称呼，第一版的文档较为混乱，有可能在以后全部统一，敬请谅解。\n关于"),a("code",[t._v("$theme")]),t._v("函数的详细定义请参考"),a("a",{attrs:{href:"api-config#theme"}},[t._v("API参考-$theme")])])]),t._v(" "),a("p",[t._v("重复自上一段正文的表述：")]),t._v(" "),a("p",[t._v("首先是入口函数"),a("code",[t._v("$theme")]),t._v("似乎比较复杂的三参数模式，选项被放在了 options 上，\n这就导致有时候无需处理Script的注入副作用时也必须写一个空函数作为revoke，略显麻烦。\n而且在 invoke 中的第三个参数 context 中其实已经提供了好用的 hook函数"),a("code",[t._v("context.revoke")]),t._v(" 来替代revoke，\n传递自不同的参数还因为作用域的问题可能导致要提升变量而增加一些工作量。\n这样来看"),a("code",[t._v("revoke")]),t._v("参数完全没有存在的价值。你可能完全不明白为什么要给"),a("code",[t._v("$theme")]),t._v("整出三个参数来。")]),t._v(" "),a("blockquote",[a("p",[t._v("这样结构是不是清楚多了 <("),a("em",[t._v("￣▽￣")]),t._v(")/")])]),t._v(" "),a("p",[t._v("但其实，这是充分考虑后的故意而为之，"),a("code",[t._v("$theme")]),t._v("函数的 revoke 参数能提醒甚至强迫你产生了影响\n就要付出消除副作用的责任的好习惯。在 utility 提供的各种功能的API中也都有相应的消除影响的API。（如果没有则一般是自动消除或无需消除）")]),t._v(" "),a("p",[t._v("同时由于"),a("code",[t._v("$theme")]),t._v("函数的复杂度，也能尽可能让开发者减少对"),a("code",[t._v("$theme")]),t._v("的调用而转向抽象出更多的逻辑从而提高性能。")]),t._v(" "),a("p",[t._v("此外，这种方式也是属于最高效的方式（"),a("s",[t._v("其实也只是省下了可忽略的几次函数调用开销")]),t._v("）")]),t._v(" "),a("p",[t._v("对于作用域问题，如果你有需要大量复用的封装功能或者逻辑，推荐的做法在主题被应用时的 revoke 中直接挂在到\nutility 或者 utils 对象上，一般推荐高度封装的API建议挂载到 utility, 较低度的静态模块挂载至 utils.")]),t._v(" "),a("p",[t._v("这样的好处是这些共享的功能逻辑不仅能在 invoke 和 revoke 之间传递，甚至能在不同JS文件中的所有"),a("code",[t._v("$theme")]),t._v("方法调用间传递。\n但也请在主题被卸载时移除这些逻辑（请勿改动原有的方法）。")]),t._v(" "),a("p",[t._v("推荐在主入口js文件中执行该功能或者专门新建一个"),a("code",[t._v("utils.js")]),t._v("的文件来做共享模块封装。")]),t._v(" "),a("p",[t._v("然后在配置文件中将这个Script文件路径放入主题风格载入配置"),a("code",[t._v("scripts")]),t._v("数组的首位，在默认配置的情况下，\nAnimeUI以及对Script加载执行做了顺序处理，请尽管根据依赖顺序填写路径数组。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("async_script")]),t._v("选项现已失去其原先作用，不再用于控制较缓慢的同步加载顺序执行Script (设定为false)\n和 并发加载和异步执行 (设定为true) 了。")]),t._v(" "),a("p",[t._v("这得益于默认载入配置"),a("code",[t._v("AuiTheme.ThemeStyle.StrictScriptLoad")]),t._v('已经得到完整支持，配置位于\n全局载入文件 "/js/config.*.js" 中, 默认值为 true 表示使用XHR请求加载主题风格的Script，\n以达到控制Script执行顺序时又能并发高效加载Script，同时还对一种可能性很小的意外情况做了一致性检查。\n如果不是为了兼容性目的，请始终保持该默认配置。')]),t._v(" "),a("p",[t._v("如果发现目标环境不支持该方式，可该载入配置设定为 "),a("code",[t._v("false")]),t._v(" 使用原生的script加载方式\n配合"),a("code",[t._v("async_script=false")]),t._v("来同步阻塞加载，以获得更高的兼容性。")]),t._v(" "),a("p",[t._v("同时，只要目标浏览器对"),a("code",[t._v("defer")]),t._v("的支持完整且符合标准，这种方式仍可并发加载顺序执行并保持非常高的性能。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);