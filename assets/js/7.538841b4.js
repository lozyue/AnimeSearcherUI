(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{392:function(t,s,a){"use strict";a.r(s);var n=a(49),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("AnimeUI 2.0 带来UI整体上的全新设计，比前一版本显得更加精巧灵活。\n性能更好，使用更流畅，界面设计更规范。")]),t._v(" "),a("p",[t._v("新版本中带来了很多特性，应用的定制度和可玩性都大大提高。")]),t._v(" "),a("h2",{attrs:{id:"全屏幕适配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全屏幕适配"}},[t._v("#")]),t._v(" 全屏幕适配")]),t._v(" "),a("p",[t._v("经过连续数个月重新来过的设计，AnimeUI 2.0已经能适配各种能搭载浏览器的常见设备。")]),t._v(" "),a("p",[t._v("对触控操作的支持尽管仍在路上，但基本已经全端可用了。")]),t._v(" "),a("h2",{attrs:{id:"丰富的配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#丰富的配置项"}},[t._v("#")]),t._v(" 丰富的配置项")]),t._v(" "),a("p",[t._v("得益于对存储模块的封装，AnimeUI v2拥有了单独的配置页面以及更丰富的配置选项。")]),t._v(" "),a("p",[t._v("不仅仅只是播放器，很多功能模块都可以由你来决定是否启用。")]),t._v(" "),a("p",[t._v("对于一些全局高度依赖的初始化选项，AnimeUI也将其专门导出为一个文件"),a("code",[t._v("/js/config.*.js")]),t._v("用于方便应用部署层级的配置。")]),t._v(" "),a("h2",{attrs:{id:"可自由更改的api通信地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可自由更改的api通信地址"}},[t._v("#")]),t._v(" 可自由更改的API通信地址")]),t._v(" "),a("p",[t._v("你可以随心部署Anime-API做服务提供了，现在只需要简单更改配置项里的通信地址为你的服务地址，\n便可在各个终端间享用服务。")]),t._v(" "),a("h2",{attrs:{id:"存储api支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储api支持"}},[t._v("#")]),t._v(" 存储API支持")]),t._v(" "),a("p",[t._v("尽管AnimeUI是针对单用户模式开发的，现在你也不用担心配置项和历史过多配置项丢失和难以迁移的问题了。")]),t._v(" "),a("p",[t._v("基于对Anime-API的兼容，配合使用带有存储API支持的Anime-API服务，你只需要保证API通信地址正确，\n在不同设备终端上的配置和历史数据将会自动同步。")]),t._v(" "),a("p",[t._v("对于可能冲突的数据，默认策略是尽可能合并去重保留更多的数据。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("到目前为止，为尽可能的保证数据不丢失，仍然建议在成功修改HTTP和WebSocket通信地址后先刷新应用再进行使用。")])]),t._v(" "),a("h2",{attrs:{id:"主题系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主题系统"}},[t._v("#")]),t._v(" 主题系统")]),t._v(" "),a("p",[t._v("AnimeUI的主题系统允许你利用CSS、JavaScript甚至只是简单的配置一些配色变量就可以对全局的色彩、风格进行规格化的修改。")]),t._v(" "),a("p",[t._v("除此之外，AnimeUI的主题是以不干扰路由驱动的页面导航的丝滑度为目标设计的，在运行状态中就可以任意随心的切换任意主题配色和风格（而不必重启应用）。")]),t._v(" "),a("p",[t._v("而AnimeUI的主题系统不仅仅只是用于装饰这一功能，AnimeUI也赋予了它一些其他任务。\n下面简单摘要一两点主题系统的功能：")]),t._v(" "),a("p",[t._v("要了解详细请看："),a("RouterLink",{attrs:{to:"/theme-dev/"}},[t._v("主题开发介绍")])],1),t._v(" "),a("h3",{attrs:{id:"修改全局配色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改全局配色"}},[t._v("#")]),t._v(" 修改全局配色")]),t._v(" "),a("p",[t._v("修改全局配色是再为简单不过的一件事情了。\nAnimeUI将配色单独提取出来作为了主题的一个分支：主题配色")]),t._v(" "),a("p",[t._v("你仅需很轻松的填写一些配色的变量的值，即可创建想要的色彩。")]),t._v(" "),a("p",[t._v("详见: "),a("RouterLink",{attrs:{to:"/theme-dev/blending/"}},[t._v("主题配色开发指北")])],1),t._v(" "),a("h3",{attrs:{id:"设定快捷键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设定快捷键"}},[t._v("#")]),t._v(" 设定快捷键")]),t._v(" "),a("p",[t._v("一个惊喜的消息是：AnimeUI 2.0 几乎全部的快捷键都是可以修改的，\n你不必再为不同的使用习惯做出牺牲了。")]),t._v(" "),a("p",[t._v("但考虑到性能和工程量，\n便将快捷键修改的功能模块下沉到了主题中。")]),t._v(" "),a("p",[t._v("仅需很简单的调用一个API，便可进行任何你喜欢的偏好修改！")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改播放页 fullscreen 操作的快捷键为 ctrl + w.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$theme")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("utility")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  utility"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setShortCut")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fullscreen"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ctrl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("使用CSS和JavaScript来定制AnimeUI则是主题系统的另一部分：主题风格 的任务了。\n这里仅展示了主题风格简单的JS API功能库调用，而注入CSS样式则是更为简单，这里暂时就不展开了。")]),t._v(" "),a("p",[t._v("关于主题风格可以查阅："),a("RouterLink",{attrs:{to:"/theme-dev/style/"}},[t._v("主题风格开发指北")])],1),t._v(" "),a("p",[a("strong",[t._v("想进一步了解？"),a("RouterLink",{attrs:{to:"/instruction/"}},[t._v("点我")]),t._v(" 开始探索吧！")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);